call plug#begin('~/.config/nvim/plugged')

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'mattn/emmet-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-dispatch'
Plug 'easymotion/vim-easymotion'
Plug 'ludovicchabant/vim-gutentags'
Plug 'robertrosman/vim-bible'
Plug 'preservim/tagbar'

call plug#end()

nnoremap <C-]> :only<bar>vsplit<CR>:execute "tselect " . expand('<cword>')<CR>


"tagbar
nmap <F8> :TagbarToggle<CR>

"dispatch test
let g:dispatch_phpunit_command = './vendor/bin/phpunit'


" 스크롤 할때 구문강조 풀리는 문제 방지 
autocmd BufEnter * syntax sync fromstart

" gutentags 상태
set statusline+=%{gutentags#statusline()}


"EucKr 설정
nnoremap <F7> :e ++enc=euc-kr <Cr>

"설정 새로 불러오기
nnoremap <F5> :source % <Cr>



" AIRLINE SETTINGS
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_skip_empty_sections = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#syntastic#enabled = 0
let g:airline_detect_iminsert=1
let g:airline#extensions#tmuxline#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
let g:airline#extensions#tabline#show_splits = 1
let g:airline#extensions#wordcount#enabled = 0
let g:airline#extensions#tagbar#enabled = 1
" END AIRLINE SETTINGS
"
" 이 옵션은 버퍼를 수정한 직후 버퍼를 감춰지도록 한다.
" 이 방법으로 버퍼를 사용하려면 거의 필수다.
set hidden

" 모든 버퍼와 각 버퍼 상태 출력
nmap <leader>bl :ls<CR>

" Easy motion
let g:EasyMotion_do_mapping  = 0 " Disable default mappings
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion
let g:EasyMotion_smartcase = 1

" 화면에 힌트키가 대문자로 표시되게 한다.
let g:EasyMotion_keys = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890;'
let g:EasyMotion_use_upper = 1

nmap <c-s><c-s> <Plug>(easymotion-overwin-line)

" INSERT 모드에서 입력하면 해당 라인 내에서 좌우로 이동 가능
imap <c-s> <c-o><Plug>(easymotion-lineanywhere)

nmap <c-s>2 <Plug>(easymotion-overwin-f2)

nmap <c-s>l <Plug>(easymotion-lineforward)
vmap <c-s>l <Plug>(easymotion-lineforward)
nmap <c-s>j <Plug>(easymotion-j)
vmap <c-s>j <Plug>(easymotion-j)
nmap <c-s>k <Plug>(easymotion-k)
vmap <c-s>k <Plug>(easymotion-k)
nmap <c-s>h <Plug>(easymotion-linebackward)
vmap <c-s>h <Plug>(easymotion-linebackward)

nmap <c-s>a <Plug>(easymotion-jumptoanywhere)
vmap <c-s>a <Plug>(easymotion-jumptoanywhere)

nmap <c-s>w <Plug>(easymotion-overwin-w)
nmap <c-s>f <Plug>(easymotion-overwin-f)

nmap <c-s>/ <Plug>(easymotion-sn)

" Smartsign (type `3` and match `3`&`#`)
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_smartsign_us = 1

" vim-choosewin 설정
"nmap <C-s>- <Plug>(choosewin)
"let g:choosewin_overlay_enable = 1
"let g:choosewin_label = 'ASDFQWERZXCV'

"COC 관련 설정

"메뉴창 색상변경
hi CocMenuSel ctermbg=109 guibg=#13354A


" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2


" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

"To make <cr> select the first completion item and confirm the completion when no item has been selected:
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" use <tab> for trigger completion and navigate to the next complete item
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()

inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"
